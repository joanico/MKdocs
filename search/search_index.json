{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Benvindu mai vizita Tutotial Python Tetun \u00b6 Benvindu mai tutorial Python tetun ne\u2019eb\u00e9 komprensivu! Diak ita mak ema ne\u2019eb\u00e9 hakarak aprende kona-ba b\u00e1ziku ka programmmer ne\u2019eb\u00e9 ho esperi\u00e9nsia hakarak atu hakle\u2019an liut\u00e1n ita-nia ko\u00f1esimentu kona-ba Python, matadalan ne\u2019e deze\u00f1a atu ajuda ita iha ita-nia jornada aprende nian. Mai ita hah\u00fa! Tabela konte\u00fadu \u00b6 Python Basika \u00b6 Introdusaun Instala no kria enviromentu Sintanse Tipu data Variavel Tuple Mutable no Immutable Set Slice Python Avansadu \u00b6 Advanced Topics Projects and Exercises Conclusion Python Framework \u00b6 Botle Django Wagtail","title":"Benvindu mai vizita Tutotial Python Tetun"},{"location":"#benvindu-mai-vizita-tutotial-python-tetun","text":"Benvindu mai tutorial Python tetun ne\u2019eb\u00e9 komprensivu! Diak ita mak ema ne\u2019eb\u00e9 hakarak aprende kona-ba b\u00e1ziku ka programmmer ne\u2019eb\u00e9 ho esperi\u00e9nsia hakarak atu hakle\u2019an liut\u00e1n ita-nia ko\u00f1esimentu kona-ba Python, matadalan ne\u2019e deze\u00f1a atu ajuda ita iha ita-nia jornada aprende nian. Mai ita hah\u00fa!","title":"Benvindu mai vizita Tutotial Python Tetun"},{"location":"#tabela-konteudu","text":"","title":"Tabela konte\u00fadu"},{"location":"#python-basika","text":"Introdusaun Instala no kria enviromentu Sintanse Tipu data Variavel Tuple Mutable no Immutable Set Slice","title":"Python Basika"},{"location":"#python-avansadu","text":"Advanced Topics Projects and Exercises Conclusion","title":"Python Avansadu"},{"location":"#python-framework","text":"Botle Django Wagtail","title":"Python Framework"},{"location":"about/","text":"Bele hare referensia sira iha ne\u2019e \u00b6 Bele hare docs iha ne\u2019e Mkdocs Bele hare docs Read the docs","title":"Referensia"},{"location":"about/#bele-hare-referensia-sira-iha-nee","text":"Bele hare docs iha ne\u2019e Mkdocs Bele hare docs Read the docs","title":"Bele hare referensia sira iha ne&rsquo;e"},{"location":"python_advanced_tutorials/","text":"Python - Advanced Tutorials \u00b6 Python - Generators \u00b6 Python - List Comprehensions \u00b6 Python - Multiple Function Arguments \u00b6 Python - Regular Expression \u00b6 Python - Exception Handling \u00b6 Python - Sets \u00b6 Python - Serialization \u00b6 Python - Partial functions \u00b6 Python - Decorators \u00b6","title":"Python Tutorial Avansadu"},{"location":"python_advanced_tutorials/#python-advanced-tutorials","text":"","title":"Python - Advanced Tutorials"},{"location":"python_advanced_tutorials/#python-generators","text":"","title":"Python - Generators"},{"location":"python_advanced_tutorials/#python-list-comprehensions","text":"","title":"Python - List Comprehensions"},{"location":"python_advanced_tutorials/#python-multiple-function-arguments","text":"","title":"Python - Multiple Function Arguments"},{"location":"python_advanced_tutorials/#python-regular-expression","text":"","title":"Python - Regular Expression"},{"location":"python_advanced_tutorials/#python-exception-handling","text":"","title":"Python - Exception Handling"},{"location":"python_advanced_tutorials/#python-sets","text":"","title":"Python - Sets"},{"location":"python_advanced_tutorials/#python-serialization","text":"","title":"Python - Serialization"},{"location":"python_advanced_tutorials/#python-partial-functions","text":"","title":"Python - Partial functions"},{"location":"python_advanced_tutorials/#python-decorators","text":"","title":"Python - Decorators"},{"location":"python_data_type/","text":"Tipu Data \u00b6 Tipu data husi variavel ne\u2019eb\u00e9 ita kria no f\u00f3 nia val\u00f3r bele identifika hanesan tuir mai ne\u2019e bele integer, string ka float no boolean. String \u00b6 String (str) mak tipu data ida ne\u2019eb\u00e9 f\u00f3 sai karakter\u00edstika iha s\u00edmbolu ho marka quotation ka dupla marka quotation. Single quotation >>> a = 'Jose' >>> type(a) <class 'str'> Double quotation >>> b = \"Maria\" >>> type(b) <class 'str'> Integer \u00b6 Integer (int) mak tipu data ida ne\u2019eb\u00e9 ho n\u00fameru decimal bele pozitivu no negativu husi 0 zero to\u2019o 9, bele n\u00fameru octal no hexadecimal. Iha octal inisi\u00e1l ho 0o no hexadecimal sei hah\u00fa ho 0x . Val\u00f3r Positivu >>> x = 10 >>> type(x) <class 'int'> Val\u00f3r Negativu >>> y = -10 >>> print(y) -10 >>> type(y) <class 'int'> Val\u00f3r boot >>> z = 100000000000000000000000 >>> print(z) 100000000000000000000000 >>> type(z) <class 'int'> Val\u00f3r Octal >>> octalInt = 0o32 >>> print(octalInt) 26 >>> type(octalInt) <class 'int'> Val\u00f3r Hexadecimal >>> hexInt = 0xEE >>> print(hexInt) 238 >>> type(hexInt) <class 'int'> Float \u00b6 Float mak tipu data ida ne\u2019eb\u00e9 reprezenta n\u00fameru ho pontu, ne\u2019eb\u00e9 ita hakerek ho pontu decimal ka ho string. Reprezenta float ho integer >>> x = float(10) >>> print(x) 10.0 >>> type(x) <class 'float'> Reprezenta float ho string >>> y = float(\"10\") >>> print(y) 10.0 >>> type(y) <class 'float'> Boolean \u00b6 Boolean tipu data ida ne\u2019eb\u00e9 ho val\u00f3r rua de\u2019it mak True no False ne\u2019eb\u00e9 eziste. >>> a = True >>> type(a) <class 'bool'> >>> b = False >>> type(b) <class 'bool'> Kompara entre val\u00f3r rua x = 5 y = 10 print(bool(x==y))","title":"Python Tipu Data"},{"location":"python_data_type/#tipu-data","text":"Tipu data husi variavel ne\u2019eb\u00e9 ita kria no f\u00f3 nia val\u00f3r bele identifika hanesan tuir mai ne\u2019e bele integer, string ka float no boolean.","title":"Tipu Data"},{"location":"python_data_type/#string","text":"String (str) mak tipu data ida ne\u2019eb\u00e9 f\u00f3 sai karakter\u00edstika iha s\u00edmbolu ho marka quotation ka dupla marka quotation. Single quotation >>> a = 'Jose' >>> type(a) <class 'str'> Double quotation >>> b = \"Maria\" >>> type(b) <class 'str'>","title":"String"},{"location":"python_data_type/#integer","text":"Integer (int) mak tipu data ida ne\u2019eb\u00e9 ho n\u00fameru decimal bele pozitivu no negativu husi 0 zero to\u2019o 9, bele n\u00fameru octal no hexadecimal. Iha octal inisi\u00e1l ho 0o no hexadecimal sei hah\u00fa ho 0x . Val\u00f3r Positivu >>> x = 10 >>> type(x) <class 'int'> Val\u00f3r Negativu >>> y = -10 >>> print(y) -10 >>> type(y) <class 'int'> Val\u00f3r boot >>> z = 100000000000000000000000 >>> print(z) 100000000000000000000000 >>> type(z) <class 'int'> Val\u00f3r Octal >>> octalInt = 0o32 >>> print(octalInt) 26 >>> type(octalInt) <class 'int'> Val\u00f3r Hexadecimal >>> hexInt = 0xEE >>> print(hexInt) 238 >>> type(hexInt) <class 'int'>","title":"Integer"},{"location":"python_data_type/#float","text":"Float mak tipu data ida ne\u2019eb\u00e9 reprezenta n\u00fameru ho pontu, ne\u2019eb\u00e9 ita hakerek ho pontu decimal ka ho string. Reprezenta float ho integer >>> x = float(10) >>> print(x) 10.0 >>> type(x) <class 'float'> Reprezenta float ho string >>> y = float(\"10\") >>> print(y) 10.0 >>> type(y) <class 'float'>","title":"Float"},{"location":"python_data_type/#boolean","text":"Boolean tipu data ida ne\u2019eb\u00e9 ho val\u00f3r rua de\u2019it mak True no False ne\u2019eb\u00e9 eziste. >>> a = True >>> type(a) <class 'bool'> >>> b = False >>> type(b) <class 'bool'> Kompara entre val\u00f3r rua x = 5 y = 10 print(bool(x==y))","title":"Boolean"},{"location":"python_environment_setup/","text":"Instala Python no setup enviromentu \u00b6 Estabelese Python no konfigura environment iha Windows, Linux, no macOS relativamente simples. Iha ne\u2019e matadalan jer\u00e1l konaba instala no konfigura python kada plataforma: Windows: \u00b6 Download Python: Ba Pajina official Python website . Klik iha tab \u201cDownloads\u201d Download verzaun ikus python ba Windows Instala Python: Instala python ne\u2019eb\u00e9 ita download ona Marka vistu iha lista \u201cAdd Python to PATH\u201d durante prosesu instalasaun Halo tuir instalasaun sira no python sei instala iha ita-boot sira nia sistema operasaun Windows nian Verifika instalasaun: Ket\u00edk python --version ka python3 --version hodi verifika katak python instala ona no cek nia verzaun Linux: \u00b6 Instala uza Jestaun pakote(apt ba ubuntu/Debian): Loke terminal ubuntu linux nian Update lista pakote: sudo apt update Instala Python: sudo apt install python3 Verifika Instalasaun : Ketik python3 --version iha terminal no verifika katak python instala ona no cek nia verzaun macOS: \u00b6 Rekomendasaun Instala uza Homebrew: Instala Homebrew karik ita seidauk iha. Vizita Homebrew\u2019s official website hodi hare instrusaun konaba instalasaun python ba MacOs Bainhira instala tiha ona Homebrew, tuir mai loke ona Terminal Ketik brew install python hodi instala python3 Verifika instalasaun: Ketik python3 --version iha terminal no verifika katak python instala ona no cek nia verzaun. Estabelese virtual Environment (Opsional maib\u00e9 Rekomenda): \u00b6 Instala Virtualenv: Loke terminal (ka Command Prompt iha Windows) Ketik pip install virtualenv hodi instala virtualenv Kria Virtual Environment: Muda ba folder ne\u2019eb\u00e9 ita hakarak kria environment Ketik virtualenv myenv hodi kria virtual environment f\u00f3 naran \u201cmyenv\u201d Ativa Virtual environment: Iha Windows, ketik myenv\\Scripts\\activate Iha Linux/macOs, ketik source myenv/bin/activate","title":"Python environment setup"},{"location":"python_environment_setup/#instala-python-no-setup-enviromentu","text":"Estabelese Python no konfigura environment iha Windows, Linux, no macOS relativamente simples. Iha ne\u2019e matadalan jer\u00e1l konaba instala no konfigura python kada plataforma:","title":"Instala Python no setup enviromentu"},{"location":"python_environment_setup/#windows","text":"Download Python: Ba Pajina official Python website . Klik iha tab \u201cDownloads\u201d Download verzaun ikus python ba Windows Instala Python: Instala python ne\u2019eb\u00e9 ita download ona Marka vistu iha lista \u201cAdd Python to PATH\u201d durante prosesu instalasaun Halo tuir instalasaun sira no python sei instala iha ita-boot sira nia sistema operasaun Windows nian Verifika instalasaun: Ket\u00edk python --version ka python3 --version hodi verifika katak python instala ona no cek nia verzaun","title":"Windows:"},{"location":"python_environment_setup/#linux","text":"Instala uza Jestaun pakote(apt ba ubuntu/Debian): Loke terminal ubuntu linux nian Update lista pakote: sudo apt update Instala Python: sudo apt install python3 Verifika Instalasaun : Ketik python3 --version iha terminal no verifika katak python instala ona no cek nia verzaun","title":"Linux:"},{"location":"python_environment_setup/#macos","text":"Rekomendasaun Instala uza Homebrew: Instala Homebrew karik ita seidauk iha. Vizita Homebrew\u2019s official website hodi hare instrusaun konaba instalasaun python ba MacOs Bainhira instala tiha ona Homebrew, tuir mai loke ona Terminal Ketik brew install python hodi instala python3 Verifika instalasaun: Ketik python3 --version iha terminal no verifika katak python instala ona no cek nia verzaun.","title":"macOS:"},{"location":"python_environment_setup/#estabelese-virtual-environment-opsional-maibe-rekomenda","text":"Instala Virtualenv: Loke terminal (ka Command Prompt iha Windows) Ketik pip install virtualenv hodi instala virtualenv Kria Virtual Environment: Muda ba folder ne\u2019eb\u00e9 ita hakarak kria environment Ketik virtualenv myenv hodi kria virtual environment f\u00f3 naran \u201cmyenv\u201d Ativa Virtual environment: Iha Windows, ketik myenv\\Scripts\\activate Iha Linux/macOs, ketik source myenv/bin/activate","title":"Estabelese virtual Environment (Opsional maib\u00e9 Rekomenda):"},{"location":"python_list_slicing/","text":"Python List Slicing \u00b6 Python iha lista bolu slicing hanesan pr\u00e1tika kom\u00fan no dala barak uza hanesan meius ida ba programmer sira hodi rezolve problema efisiente sira. Konsidera lista python nian, nune\u2019e atu hetan asesu ba elementu oioin iha lista ida, ita presiza ko\u2019a lista, dalan ida atu halo ida ne\u2019e mak uza slicing operator simples. Iha operator ida ne\u2019e, ida ita bele espes\u00edfika atu hah\u00fa ko\u2019a/slice iha ne\u2019eb\u00e9 no remata iha ne\u2019eb\u00e9 no m\u00f3s espasu hakat dala hira, no ikus liu sei f\u00f3 sai rezultadu iha lista ne\u2019eb\u00e9 eziste ona. Syntax: \u00b6 Lst [Initial:End:IndexJump] Karik List iha leten maka espresaun iha leten sei ezekuta parte husi lista index hah\u00fa no remata no espasu ka hakat medida indexJump. Indexing \u00b6 1. Positive Indexes # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # copy sai lista ka fo sai lista print(List[::]) F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 2. Negative Indexes # INDEX # post = [ 0| 1 | 2 | 3 | 4 | 5] # Nega = [-5|-4 |-3 |-2 | -1] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai lista ho negativu print(List[-10::1]) F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 3. Slicing # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(List[1:5]) # 1 reprezenta index hahu no 5 reprezenta index remata no rezultadu hatudu katak [1, 2, 3, 4] sei foti deit val\u00f3r antes index 5 ba kotuk F sai rezultadu [1, 2, 3, 4] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hanesan range print(List[3:9:2]) # 3 reprezenta index hahu to remata 9 no 2 step Fosai rezultadu [3, 5, 7] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hanesan range print(List[::]) # :: reprezenta index hah\u00fa no index remata ka f\u00f3 sai lista tomak la slice F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hanesan range print(List[::2]) # :: reprezenta index hahu no remata no 2 etapa F\u00f3 sai rezultadu [0, 2, 4, 6, 8] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # reverze lista husi 0 ba 9 print(List[::-1]) # reverse lista no fo hakat ka etapa 3 print(List[::-3]) print(List[:1:-2]) F\u00f3 sai rezultadu [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] [9, 6, 3, 0] [9, 7, 5, 3] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Ida nee fo sai rezultadu ho lista mamuk tanba hahu ho index sanulu maibe iha lista la too sanulu no step 2 la iha rezultadu tanba la iha falor nebe hakat liu index sanulu # karik bele kria ezemplu seluk hanesan print(List[4::2]) sei fo sai rezultadu [4, 6, 8] print(List[10::2]) # Iha list slicing index hahu to remata ita la bele fo hanesan iha exemplu kraik nee nia sei la bele fo rezultadu. # Karik atu fo sai rezultadu iha index hahu no remata la bele hanesan print(List[1:4:1]) sei fo sai rezultadu [1, 2, 3] print(List[1:1:1]) # Iha list slicing index negative mos hanesan hahu to remata ita la bele fo hanesan iha exemplu kraik nee nia sei la bele fo rezultadu. # Karik atu fo sai rezultadu iha index hahu no remata la bele hanesan print(List[-1:-4:-1]) sei fo sai rezultadu [9, 8, 7] print(List[-1:-1:-1]) # Iha slice mos ita labele fo valor remata to zero print(List[:0:]) Fosai rezultadu [] [] [] [] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hah\u00fa husi index 4 too remata no hakat espasu 2 print(List[1:3]) # F\u00f3 sai rezultadu hah\u00fa husi index 1 too remata 4 no hakat espasu 2 print(List[1:4:1]) # F\u00f3 sai rezultadu reverse no remata iha index 4 no hakat espasu ida print(List[-1:-4:-1]) F\u00f3 sai rezultadu [1, 2] [1, 2, 3] [9, 8, 7] colors = ['red', 'green', 'blue', 'orange'] print(colors[1:3]) F\u00f3 sai rezultadu [\u2018green\u2019, \u2018blue\u2019] 4. Assign data | # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Fo sai lista print(List[::]) F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # assign valor ba array nia laran List[4:6] = [10, 11] print(List) F\u00f3 sai rezultadu [0, 1, 2, 3, 10, 11, 6, 7, 8, 9] 5. Slice String b = \"Hello, World!\" print(b[2:5]) F\u00f3 sai rezultadu llo print(b[-1::-1]) F\u00f3 sai rezultadu !dlroW ,olleH print(b[:5]) F\u00f3 sai rezultadu Hello print(b[-5:-2]) F\u00f3 sai rezultadu orl 6. Python slice() Function b = \"Hello, World!\" s = slice(5) # sei foti letra 4 antes index 5 ba kotuk print(b[s]) F\u00f3 sai rezultadu Hello b = \"Hello, World!\" s = slice(3, 6) # sei foti letra hahu husi index 3 too antes index 6 ba kotuk print(b[s]) F\u00f3 sai rezultadu lo, b = \"Hello, World!\" s = slice(3, 10, 2) # sei foti letra hahu husi index 3 too antes index 10 ba kotuk no fo sai deit letra husi espasu 2 print(b[s]) F\u00f3 sai rezultadu l,Wr","title":"Python Slice"},{"location":"python_list_slicing/#python-list-slicing","text":"Python iha lista bolu slicing hanesan pr\u00e1tika kom\u00fan no dala barak uza hanesan meius ida ba programmer sira hodi rezolve problema efisiente sira. Konsidera lista python nian, nune\u2019e atu hetan asesu ba elementu oioin iha lista ida, ita presiza ko\u2019a lista, dalan ida atu halo ida ne\u2019e mak uza slicing operator simples. Iha operator ida ne\u2019e, ida ita bele espes\u00edfika atu hah\u00fa ko\u2019a/slice iha ne\u2019eb\u00e9 no remata iha ne\u2019eb\u00e9 no m\u00f3s espasu hakat dala hira, no ikus liu sei f\u00f3 sai rezultadu iha lista ne\u2019eb\u00e9 eziste ona.","title":"Python List Slicing"},{"location":"python_list_slicing/#syntax","text":"Lst [Initial:End:IndexJump] Karik List iha leten maka espresaun iha leten sei ezekuta parte husi lista index hah\u00fa no remata no espasu ka hakat medida indexJump.","title":"Syntax:"},{"location":"python_list_slicing/#indexing","text":"1. Positive Indexes # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # copy sai lista ka fo sai lista print(List[::]) F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 2. Negative Indexes # INDEX # post = [ 0| 1 | 2 | 3 | 4 | 5] # Nega = [-5|-4 |-3 |-2 | -1] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai lista ho negativu print(List[-10::1]) F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 3. Slicing # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] print(List[1:5]) # 1 reprezenta index hahu no 5 reprezenta index remata no rezultadu hatudu katak [1, 2, 3, 4] sei foti deit val\u00f3r antes index 5 ba kotuk F sai rezultadu [1, 2, 3, 4] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hanesan range print(List[3:9:2]) # 3 reprezenta index hahu to remata 9 no 2 step Fosai rezultadu [3, 5, 7] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hanesan range print(List[::]) # :: reprezenta index hah\u00fa no index remata ka f\u00f3 sai lista tomak la slice F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hanesan range print(List[::2]) # :: reprezenta index hahu no remata no 2 etapa F\u00f3 sai rezultadu [0, 2, 4, 6, 8] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # reverze lista husi 0 ba 9 print(List[::-1]) # reverse lista no fo hakat ka etapa 3 print(List[::-3]) print(List[:1:-2]) F\u00f3 sai rezultadu [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] [9, 6, 3, 0] [9, 7, 5, 3] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Ida nee fo sai rezultadu ho lista mamuk tanba hahu ho index sanulu maibe iha lista la too sanulu no step 2 la iha rezultadu tanba la iha falor nebe hakat liu index sanulu # karik bele kria ezemplu seluk hanesan print(List[4::2]) sei fo sai rezultadu [4, 6, 8] print(List[10::2]) # Iha list slicing index hahu to remata ita la bele fo hanesan iha exemplu kraik nee nia sei la bele fo rezultadu. # Karik atu fo sai rezultadu iha index hahu no remata la bele hanesan print(List[1:4:1]) sei fo sai rezultadu [1, 2, 3] print(List[1:1:1]) # Iha list slicing index negative mos hanesan hahu to remata ita la bele fo hanesan iha exemplu kraik nee nia sei la bele fo rezultadu. # Karik atu fo sai rezultadu iha index hahu no remata la bele hanesan print(List[-1:-4:-1]) sei fo sai rezultadu [9, 8, 7] print(List[-1:-1:-1]) # Iha slice mos ita labele fo valor remata to zero print(List[:0:]) Fosai rezultadu [] [] [] [] # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # F\u00f3 sai rezultadu hah\u00fa husi index 4 too remata no hakat espasu 2 print(List[1:3]) # F\u00f3 sai rezultadu hah\u00fa husi index 1 too remata 4 no hakat espasu 2 print(List[1:4:1]) # F\u00f3 sai rezultadu reverse no remata iha index 4 no hakat espasu ida print(List[-1:-4:-1]) F\u00f3 sai rezultadu [1, 2] [1, 2, 3] [9, 8, 7] colors = ['red', 'green', 'blue', 'orange'] print(colors[1:3]) F\u00f3 sai rezultadu [\u2018green\u2019, \u2018blue\u2019] 4. Assign data | # Hahu ho lista List = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # Fo sai lista print(List[::]) F\u00f3 sai rezultadu [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] # assign valor ba array nia laran List[4:6] = [10, 11] print(List) F\u00f3 sai rezultadu [0, 1, 2, 3, 10, 11, 6, 7, 8, 9] 5. Slice String b = \"Hello, World!\" print(b[2:5]) F\u00f3 sai rezultadu llo print(b[-1::-1]) F\u00f3 sai rezultadu !dlroW ,olleH print(b[:5]) F\u00f3 sai rezultadu Hello print(b[-5:-2]) F\u00f3 sai rezultadu orl 6. Python slice() Function b = \"Hello, World!\" s = slice(5) # sei foti letra 4 antes index 5 ba kotuk print(b[s]) F\u00f3 sai rezultadu Hello b = \"Hello, World!\" s = slice(3, 6) # sei foti letra hahu husi index 3 too antes index 6 ba kotuk print(b[s]) F\u00f3 sai rezultadu lo, b = \"Hello, World!\" s = slice(3, 10, 2) # sei foti letra hahu husi index 3 too antes index 10 ba kotuk no fo sai deit letra husi espasu 2 print(b[s]) F\u00f3 sai rezultadu l,Wr","title":"Indexing"},{"location":"python_mutable_immutable/","text":"Python Mutable no Immutable \u00b6 Koseitu set mutable mak ita bele muda objetu sira iha lista no dictionary nia laran >>> mutable_obj = ['a', 'b', 'c', 'd'] # Mutable list >>> mutable_obj[1] = 'e' # Troka objetu iha indese 1 ba e >>> print(mutable_obj) ['a', 'e', 'c', 'd'] >>> mutable_obj = {'a': 1, 'b': 2, 'c': 3} # Mutable dictionary >>> mutable_obj['a'] = 'e' # Troka valor objetu iha indese key 1 ba e >>> print(mutable_obj) {'a': 'e', 'b': 2, 'c': 3} >>> mutable_obj.keys() dict_keys(['a', 'b', 'c']) >>> mutable_obj.values() dict_values(['e', 2, 3]) Koseitu set immutable mak ita bele muda objetu sira iha number, string no tuple nia laran >>> immutable_obj = ('a', 'b', 'c', 'd') # Immuatable tuple >>> immutable_obj[1] = 'e' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment 'tuple' object does not support item assignment >>> immutable_obj = 'a' # Immuatable string >>> immutable_obj['a'] = 'e' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment 'str' object does not support item assignment","title":"Python Mutable no Immutable"},{"location":"python_mutable_immutable/#python-mutable-no-immutable","text":"Koseitu set mutable mak ita bele muda objetu sira iha lista no dictionary nia laran >>> mutable_obj = ['a', 'b', 'c', 'd'] # Mutable list >>> mutable_obj[1] = 'e' # Troka objetu iha indese 1 ba e >>> print(mutable_obj) ['a', 'e', 'c', 'd'] >>> mutable_obj = {'a': 1, 'b': 2, 'c': 3} # Mutable dictionary >>> mutable_obj['a'] = 'e' # Troka valor objetu iha indese key 1 ba e >>> print(mutable_obj) {'a': 'e', 'b': 2, 'c': 3} >>> mutable_obj.keys() dict_keys(['a', 'b', 'c']) >>> mutable_obj.values() dict_values(['e', 2, 3]) Koseitu set immutable mak ita bele muda objetu sira iha number, string no tuple nia laran >>> immutable_obj = ('a', 'b', 'c', 'd') # Immuatable tuple >>> immutable_obj[1] = 'e' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment 'tuple' object does not support item assignment >>> immutable_obj = 'a' # Immuatable string >>> immutable_obj['a'] = 'e' Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'str' object does not support item assignment 'str' object does not support item assignment","title":"Python Mutable no Immutable"},{"location":"python_notifikasaun/","text":"Uza Python hodi kalkula loron moris \u00b6 Kalkula loron moris uza python. Vizaun Jeral \u00b6 Iha topiku ida nee sei koalia konaba uza funsaun python hodi halo kalkulasaun tinan no import file no uza dataframe hodi fo sai rezultadu. Ezemplu: Fahe subsidiu bazeia ba ema nia tinan ka ita bele hatene ohin loron ema nain hira mak selebra tinan iha instituisaun ida ka organizsaun ruma. Instrumentu \u00b6 Instrumentu ne\u2019eb\u00e9 sei uza mak : Asegura katak ita instala ona python3 iha ita nia laptop Install jupyter notebook ka lab Install python pandas Prosesu Exekuta \u00b6 Rejistu tinan iha excel file ka source data ruma ne\u2019ebe rejistu ho data moris ezemplu hanesan No , Municipio , Posto , Suco , Aldeia , Naran , Ke-BI , Data-Moris no save ho tipu format csv iha diretory nebe ita atu halo kalkulasaun. Loke Jupyter lab iha terminal jupyter lab (saturday_2024) \u279c saturday_2024 jupyter lab [I 2024-02-25 11:28:16.006 ServerApp] jupyterlab | extension was successfully linked. [I 2024-02-25 11:28:16.736 ServerApp] nbclassic | extension was successfully linked. Kria file jupyter ida ho naran kalkula_tinan hamutuk ho file excel nebe ita rai hanesan file csv. Flowchart 1 konaba prosesu kalkula tinan. mermaid flowchart LR A([Inisia]) --> B(Kria funsaun) B --> C{Deklara kondisaun} C --> D[(Check data iha database)] D -->|Sin| E[Aprova] D -->|Lae| F[La aprova] 4.1. Import python library import pandas as pd from datetime import datetime from datetime import date \u200b 4.2. Kria data variabel ida ho tipu dictionary no hatama ba data frame d = { \"No\": [1, 2, 3], \"Naran\": [\"Mario\", \"Antonio\", \"Joanico\"], \"data_moris\": ['17.02.1960', '27.02.1961', '07.01.1991'] } df = pd.DataFrame(data=d) \u200b 4.3. Kria funsaun konaba kalkula tinan. def kalkula_tinan(data_moris): born = datetime.strptime(data_moris, \"%d.%m.%Y\").date() today = date.today() return today.year - born.year - ((today.month, today.day) < (born.month, born.day)) 4.4. Deklara kondisaun. def notifikasaun(tinan): if tinan == 60: return \"Parabens Ohin Ita hetan ona subsidu\" elif tinan >= 60: return \"Ita hetan ona subsidu\" elif tinan <= 60: return \"Favor hein ita nia subsidu\" \u200b 4.5. Exekuta python no fo sai rezultadu df['age'] = df['data_moris'].apply(kalkula_tinan) df['mensajen'] = df['age'].apply(notifikasaun) df Rezultadu: No Naran data_moris age mensajen 1 Mario 17.02.1960 64 Ita hetan ona subsidu 2 Antonio 27.02.1961 63 Ita hetan ona subsidu 3 Joanico 07.01.1991 33 Favor hein ita nia subsidu Flowchart 2 konaba import csv file no uza panda data frame hodi kalkula tinan. mermaid flowchart LR P[[Oinsa hatama scv file uza pandas data frame?]] P --> A A([Hatama data]) --> B(Kria funsaun ida) B --> C{Deklara kondisaun} C -->|Sin| D[Aprova] C -->|Lae| E[La aprova] 5.1 Import python library from datetime import datetime from datetime import date import pandas as pd df = pd.read_csv('naran.csv', sep=';') 5.2 Kria funsaun konaba kalkula tinan. # Kria funsaun Kalkula tinan def kalkula_tinan(data_moris): # kria tipu format tinan nian born = pd.to_datetime(data_moris, format=\"%Y-%m-%d\") today = date.today() # kalkula tinan moris ho data ohin nian return today.year - born.year - ((today.month, today.day) > (born.month, born.day)) \u200b 5.3 Kria funsaun ida konaba notifikasaun tinan moris nian. # Kria funsaun haruka konaba tinan def notifikasaun(tinan): if tinan == 60: return \"Parabens Ohin Ita hetan ona subsidu\" elif tinan >= 60: return \"Ita hetan ona subsidu\" elif tinan <= 60: return \"Favor hein ita nia subsidu\" \u200b 5.4 Exekuta rezultadu ho python # kria koluna foun ho naran tinan no aplika tinan df['tinan'] = df['Loron_Moris'].apply(kalkula_tinan) df['mensajen'] = df['tinan'].apply(notifikasaun) #print valor espesifiku. df = df.loc[df['tinan'] == 60] \u200b 5.5 Kria file csv foun husi rezultadu: #kria csv file df = df.to_csv(\"tinan.csv\", encoding='utf-8', index=False) df Rezultadu \u00b6 \u200b \u200b","title":"Python notifikasaun"},{"location":"python_notifikasaun/#uza-python-hodi-kalkula-loron-moris","text":"Kalkula loron moris uza python.","title":"Uza Python hodi kalkula loron moris"},{"location":"python_notifikasaun/#vizaun-jeral","text":"Iha topiku ida nee sei koalia konaba uza funsaun python hodi halo kalkulasaun tinan no import file no uza dataframe hodi fo sai rezultadu. Ezemplu: Fahe subsidiu bazeia ba ema nia tinan ka ita bele hatene ohin loron ema nain hira mak selebra tinan iha instituisaun ida ka organizsaun ruma.","title":"Vizaun Jeral"},{"location":"python_notifikasaun/#instrumentu","text":"Instrumentu ne\u2019eb\u00e9 sei uza mak : Asegura katak ita instala ona python3 iha ita nia laptop Install jupyter notebook ka lab Install python pandas","title":"Instrumentu"},{"location":"python_notifikasaun/#prosesu-exekuta","text":"Rejistu tinan iha excel file ka source data ruma ne\u2019ebe rejistu ho data moris ezemplu hanesan No , Municipio , Posto , Suco , Aldeia , Naran , Ke-BI , Data-Moris no save ho tipu format csv iha diretory nebe ita atu halo kalkulasaun. Loke Jupyter lab iha terminal jupyter lab (saturday_2024) \u279c saturday_2024 jupyter lab [I 2024-02-25 11:28:16.006 ServerApp] jupyterlab | extension was successfully linked. [I 2024-02-25 11:28:16.736 ServerApp] nbclassic | extension was successfully linked. Kria file jupyter ida ho naran kalkula_tinan hamutuk ho file excel nebe ita rai hanesan file csv. Flowchart 1 konaba prosesu kalkula tinan. mermaid flowchart LR A([Inisia]) --> B(Kria funsaun) B --> C{Deklara kondisaun} C --> D[(Check data iha database)] D -->|Sin| E[Aprova] D -->|Lae| F[La aprova] 4.1. Import python library import pandas as pd from datetime import datetime from datetime import date \u200b 4.2. Kria data variabel ida ho tipu dictionary no hatama ba data frame d = { \"No\": [1, 2, 3], \"Naran\": [\"Mario\", \"Antonio\", \"Joanico\"], \"data_moris\": ['17.02.1960', '27.02.1961', '07.01.1991'] } df = pd.DataFrame(data=d) \u200b 4.3. Kria funsaun konaba kalkula tinan. def kalkula_tinan(data_moris): born = datetime.strptime(data_moris, \"%d.%m.%Y\").date() today = date.today() return today.year - born.year - ((today.month, today.day) < (born.month, born.day)) 4.4. Deklara kondisaun. def notifikasaun(tinan): if tinan == 60: return \"Parabens Ohin Ita hetan ona subsidu\" elif tinan >= 60: return \"Ita hetan ona subsidu\" elif tinan <= 60: return \"Favor hein ita nia subsidu\" \u200b 4.5. Exekuta python no fo sai rezultadu df['age'] = df['data_moris'].apply(kalkula_tinan) df['mensajen'] = df['age'].apply(notifikasaun) df Rezultadu: No Naran data_moris age mensajen 1 Mario 17.02.1960 64 Ita hetan ona subsidu 2 Antonio 27.02.1961 63 Ita hetan ona subsidu 3 Joanico 07.01.1991 33 Favor hein ita nia subsidu Flowchart 2 konaba import csv file no uza panda data frame hodi kalkula tinan. mermaid flowchart LR P[[Oinsa hatama scv file uza pandas data frame?]] P --> A A([Hatama data]) --> B(Kria funsaun ida) B --> C{Deklara kondisaun} C -->|Sin| D[Aprova] C -->|Lae| E[La aprova] 5.1 Import python library from datetime import datetime from datetime import date import pandas as pd df = pd.read_csv('naran.csv', sep=';') 5.2 Kria funsaun konaba kalkula tinan. # Kria funsaun Kalkula tinan def kalkula_tinan(data_moris): # kria tipu format tinan nian born = pd.to_datetime(data_moris, format=\"%Y-%m-%d\") today = date.today() # kalkula tinan moris ho data ohin nian return today.year - born.year - ((today.month, today.day) > (born.month, born.day)) \u200b 5.3 Kria funsaun ida konaba notifikasaun tinan moris nian. # Kria funsaun haruka konaba tinan def notifikasaun(tinan): if tinan == 60: return \"Parabens Ohin Ita hetan ona subsidu\" elif tinan >= 60: return \"Ita hetan ona subsidu\" elif tinan <= 60: return \"Favor hein ita nia subsidu\" \u200b 5.4 Exekuta rezultadu ho python # kria koluna foun ho naran tinan no aplika tinan df['tinan'] = df['Loron_Moris'].apply(kalkula_tinan) df['mensajen'] = df['tinan'].apply(notifikasaun) #print valor espesifiku. df = df.loc[df['tinan'] == 60] \u200b 5.5 Kria file csv foun husi rezultadu: #kria csv file df = df.to_csv(\"tinan.csv\", encoding='utf-8', index=False) df","title":"Prosesu Exekuta"},{"location":"python_notifikasaun/#rezultadu","text":"\u200b \u200b","title":"Rezultadu"},{"location":"python_other_tutorials/","text":"Python - Other Python Tutorials \u00b6 Python - Database Access \u00b6 Python - Network Programming \u00b6 Python - GUI Programming \u00b6 Python - Web development \u00b6 Python - Framework \u00b6 Botle Flask Django","title":"Python Tutorial Seluk"},{"location":"python_other_tutorials/#python-other-python-tutorials","text":"","title":"Python - Other Python Tutorials"},{"location":"python_other_tutorials/#python-database-access","text":"","title":"Python - Database Access"},{"location":"python_other_tutorials/#python-network-programming","text":"","title":"Python - Network Programming"},{"location":"python_other_tutorials/#python-gui-programming","text":"","title":"Python - GUI Programming"},{"location":"python_other_tutorials/#python-web-development","text":"","title":"Python - Web development"},{"location":"python_other_tutorials/#python-framework","text":"Botle Flask Django","title":"Python - Framework"},{"location":"python_overview/","text":"Saida mak Python? \u00b6 Python mak l\u00edngua programasaun ida ne\u2019eb\u00e9 kria husi Guido Van Rossum no publika iha tinan 1991. Python bele uza ba: Web development (server-side), Software development, Matematika, System scripting Saida mak python bele halo? \u00b6 Python bele uza iha server hodi kria aplikasaun web. Python bele hamutuk ho software hodi kria workflows. Python bele halo koneksaun ba sistema basedadus. ida ne\u2019e bele lee no modifika dokumentu sira. python bele trata ho dadus ne\u2019eb\u00e9 boot no performa matem\u00e1tika complexu. Python bele uza hodi halo prot\u00f3tipu ne\u2019eb\u00e9 lais ka bele dezenvolve software ne\u2019eb\u00e9 prontu hodi uza. Tanba sa iha Python? \u00b6 Python servisu ho diferente plataforma sira hanesan(Windows, Mac, Linux, Raspberry Pi, etc) Python iha sintase ne\u2019eb\u00e9 simples hanesan ho l\u00edngua Ingles. Python iha sintase ne\u2019eb\u00e9 bele permite hodi dezenvolve kria programa ho li\u00f1a ki\u2019ik kompara ho l\u00edngua programasaun balu. Python bele trata forma ho prosedimentu, object-oriental, ka forma funsiona. Saida presiza hatene husi Python maka: Versaun python agora iha python 2 no python 3, python2 bainhira instala ba sistema operasaun linux nia iha ona pakote python verzaun 2 no python verzaun 2 popular maibe iha limitasaun ba sitase balu no la atualizadu. Python3 ne\u2019e atualizadu no iha feature foun husi python. Iha totorial ida ne\u2019e python bele hakerek iha textu editor, python iha posibilidade bele hakerek integradu dezenvolve iha environment( IDLE ), Pycharn, Netbeans no Jupyter notebook. Kompara python syntax ho lingua programasaun sira seluk \u00b6 Python deze\u00f1u ba abilidade hodi lee hanesan ho l\u00edngua English ne\u2019eb\u00e9 influ\u00e9nsia husi Matematika. Python uza li\u00f1a foun kompleta hanesan command, kontr\u00e1riu ho l\u00edngua programasaun seluk dala barak uza semicolons ka parente( ; ka () ). Python depende ba indentation uza espasu mamuk hodi scope ka hafahe hanesan loops, functions no classes. L\u00edngua programasaun seluk dala barak uza curly-brackets hanesan objetivu Exemplu \u00b6 print(\"Hello, World!\")","title":"Python Introdusaun"},{"location":"python_overview/#saida-mak-python","text":"Python mak l\u00edngua programasaun ida ne\u2019eb\u00e9 kria husi Guido Van Rossum no publika iha tinan 1991. Python bele uza ba: Web development (server-side), Software development, Matematika, System scripting","title":"Saida mak Python?"},{"location":"python_overview/#saida-mak-python-bele-halo","text":"Python bele uza iha server hodi kria aplikasaun web. Python bele hamutuk ho software hodi kria workflows. Python bele halo koneksaun ba sistema basedadus. ida ne\u2019e bele lee no modifika dokumentu sira. python bele trata ho dadus ne\u2019eb\u00e9 boot no performa matem\u00e1tika complexu. Python bele uza hodi halo prot\u00f3tipu ne\u2019eb\u00e9 lais ka bele dezenvolve software ne\u2019eb\u00e9 prontu hodi uza.","title":"Saida mak python bele halo?"},{"location":"python_overview/#tanba-sa-iha-python","text":"Python servisu ho diferente plataforma sira hanesan(Windows, Mac, Linux, Raspberry Pi, etc) Python iha sintase ne\u2019eb\u00e9 simples hanesan ho l\u00edngua Ingles. Python iha sintase ne\u2019eb\u00e9 bele permite hodi dezenvolve kria programa ho li\u00f1a ki\u2019ik kompara ho l\u00edngua programasaun balu. Python bele trata forma ho prosedimentu, object-oriental, ka forma funsiona. Saida presiza hatene husi Python maka: Versaun python agora iha python 2 no python 3, python2 bainhira instala ba sistema operasaun linux nia iha ona pakote python verzaun 2 no python verzaun 2 popular maibe iha limitasaun ba sitase balu no la atualizadu. Python3 ne\u2019e atualizadu no iha feature foun husi python. Iha totorial ida ne\u2019e python bele hakerek iha textu editor, python iha posibilidade bele hakerek integradu dezenvolve iha environment( IDLE ), Pycharn, Netbeans no Jupyter notebook.","title":"Tanba sa iha Python?"},{"location":"python_overview/#kompara-python-syntax-ho-lingua-programasaun-sira-seluk","text":"Python deze\u00f1u ba abilidade hodi lee hanesan ho l\u00edngua English ne\u2019eb\u00e9 influ\u00e9nsia husi Matematika. Python uza li\u00f1a foun kompleta hanesan command, kontr\u00e1riu ho l\u00edngua programasaun seluk dala barak uza semicolons ka parente( ; ka () ). Python depende ba indentation uza espasu mamuk hodi scope ka hafahe hanesan loops, functions no classes. L\u00edngua programasaun seluk dala barak uza curly-brackets hanesan objetivu","title":"Kompara python syntax ho lingua programasaun sira seluk"},{"location":"python_overview/#exemplu","text":"print(\"Hello, World!\")","title":"Exemplu"},{"location":"python_set/","text":"Python - Set \u00b6 Set mak tipu data mutabel ne\u2019eb\u00e9 halo kolesaun ba data husi item barak iha variavel ida de\u2019it. Set m\u00f3s tipu data ida husi Python ne\u2019eb\u00e9 uza hodi rai kolesaun data hanesan sira seluk list, tuple no dictionary sira iha diferensa oins\u00e1 atu uza. Set simbolika mak { } . Kolesaun data set mak hanesan: Set mutable bele muda objetu sira iha list ho dict Set immutable la bele muda objetu ka aumenta iha set nia laran hanesan list ho dict Set distinct val\u00f3r sira ne\u2019eb\u00e9 dupla Set la simu print ka buka elementu husi \u00edndise(unindexed) Set la order objetu (unordered) >>> numeru = {2, 4, 6, 8, 10} # Kria set numeru >>> print(numeru) # print set {2, 4, 6, 8, 10} >>> string = {\"Mario\", \"Ano\"} # Kria set string >>> print(string) {'Mario', 'Ano'} >>> item = {1, \"Jose\", 5.5, True} # Kria diferensia objetu >>> print(item) {1, 5.5, 'Jose'} Set ida la rai objetu dupla. Maski objetu ida aumenta liu dala ida iha curly brackets laran, iha de\u2019it kopia ida iha objetu ne\u2019eb\u00e9 define ona. Tanba ne\u2019e, la bele halo operasaun index no slicing iha objetu ne\u2019eb\u00e9 define ona. >>> numeru = {1, 2, 2, 3, 4, 4, 5, 5} # elementu 5 mak dupla >>> print(numeru) # elementu 5 sei print ida deit {1, 2, 3, 4, 5} Unordered Order ba elementu sira iha set ne\u2019e la nesesariamente hanesan ho orden ne\u2019eb\u00e9 f\u00f3 tiha ona. Python optimista estrutura set ida ne\u2019eb\u00e9 bele hala\u2019o operasaun iha set ne\u2019e mak define iha matem\u00e1tika ka n\u00fameru sira ne\u2019eb\u00e9 ita f\u00f3 iha set laran. >>> set1 = {'a', 'b', 'c', 'd'} >>> print(set1) {'a', 'c', 'b', 'd'} >>> set1 = {1, 2, 7, 4, 5} >>> print(set1) {1, 2, 4, 5, 7} Set Mutable set mutable nian bele muda tanba set ne\u2019e rasik bele modifika, maib\u00e9 elementu sira ne\u2019eb\u00e9 iha set ne\u2019e tenki iha tipu immutable. >>> set1 = {1, 2} >>> print(set1) {1, 2} >>> set1.add(3) >>> print(set1) {1, 2, 3} >>> set1.update([4, 5]) >>> print(set1) {1, 2, 3, 4, 5} >>> set1 = {\"Mario\"} >>> print(set1) {'Mario'} >>> set1.add(\"Ano\") >>> print(set1) {'Mario', 'Ano'} >>> set1 = {(\"Mario\", \"Ano\")} >>> print(set1) {('Mario', 'Ano')} >>> set1.add(\"Ony\") >>> print(set1) {'Ony', ('Mario', 'Ano')} Set Immutable Objetu immutavel (Hashable) mak bele sai parte ida husi objetu set mak hanesan n\u00fameru (integer, float, no m\u00f3s kompleksu), string no tuple, maib\u00e9 la simu objetu set iha lista, no dictionary. >>> set_val = {(5, 5), 6, 8} # Bele aumenta tuple iha set nia laran >>> print(set_val) {8, (5, 5), 6} >>> set_val = {[5, 5], 6, 8} # La bele aumenta list iha set nia laran Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unhashable type: 'list' unhashable type: 'list' >>> set_val = {[5, 5], 6, 8} # La bele aumenta set iha set seluk nia laran Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unhashable type: 'set' unhashable type: 'set' Iha ezemplu iha leten, (5, 5) mak tuple ida, ne\u2019e duni sai parte husi set. Maib\u00e9, [5, 5] mak lista ida ne\u2019eb\u00e9 hatudu mensajen erru ida ne\u2019e dehan katak lista ne\u2019e la bele f\u00f3 sai (unhashable). (Hashing mak mekanizmu ida iha si\u00e9nsia komputad\u00f3r nian ne\u2019eb\u00e9 permite buka lalais objetu sira iha mem\u00f3ria komputad\u00f3r nian.) Maski objetu mutavel (bele muda) sira la rai iha set ida, maib\u00e9 set ne\u2019e rasik mak objetu mutavel ida. Uza funsaun set () atu kria set ne\u2019eb\u00e9 mamuk. Empty curly braces sei kria dictionary ne\u2019eb\u00e9 mamuk duke set ne\u2019eb\u00e9 mamuk. >>> set_val = {} # Kria dictionary mamuk >>> print(set_val) {} >>> type(set_val) <class 'dict'> >>> set_mamuk = set() # kria set mamuk >>> print(set_mamuk) set() >>> type(set_mamuk) <class 'set'> Funsaun set () ne\u2019e m\u00f3s uza hodi transforma objetu string, tuple, ka dictionary ba objetu set hanesan hatudu iha kraik. >>> s = set('Hello') # konverte string ba set >>> print(s) {'e', 'H', 'l', 'o'} >>> n = set((1,2,7,4,5)) # konverte tuple ba set >>> print(n) {1, 2, 4, 5, 7} >>> i = {1: 'Ida', 2: 'Rua'} >>> s = set(i) # konverte dict ba set >>> print(s) {1, 2} Modify Set Elements \u00b6 Uza m\u00e9todu add (), remove () ka update () hodi modifika kolesaun set. >>> s = set() # kria set mamuk >>> s.add(1) # Aumenta elementu 1 >>> s.add(2) # Aumenta elementu 2 >>> print(s) {1, 2} >>> s.update([2, 3]) # Update elementu >>> print(s) {1, 2, 3} >>> s.remove(2) # Hamoos elementu >>> print(s) {1, 3} Set Operations \u00b6 Hanesan temi tiha ona iha leten, tipu dadus ne\u2019eb\u00e9 define iha Python implementasaun hanesan set ne\u2019eb\u00e9 define iha matem\u00e1tika. Bele hala\u2019o operasaun oioin |, &, - no ^ . Operad\u00f3r sira halo operasaun ho nia unidade, intervensaun, diferensa no diferensa simetrika (union, intersection, difference, and symmetric difference operations ). Operador sira ne\u2019e ida-idak iha m\u00e9todu korrespond\u00e9nsia ne\u2019eb\u00e9 asosiadu ho klase ne\u2019eb\u00e9 harii ona. Union: Returns ka f\u00f3 fila set foun ida ho elementu sira husi set rua ne\u2019eb\u00e9 la inklui sira ne\u2019eb\u00e9 dupla no for order. Operad\u00f3r: | Metode: set.union() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1|s2 {1, 2, 3, 4, 5, 6, 7} >>> s2|s1 {1, 2, 3, 4, 5, 6, 7} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.union(s2) {1, 2, 3, 4, 5, 6, 7} >>> s2.union(s1) {1, 2, 3, 4, 5, 6, 7} Intersection: Returns ka f\u00f3 fali set foun ne\u2019eb\u00e9 kontein elementu ne\u2019eb\u00e9 hanesan iha set rua ne\u2019e nia laran. Operad\u00f3r: & Metode: set.intersection() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1&s2 {4, 5} >>> s2&s1 {4, 5} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.intersection(s2) {4, 5} >>> s2.intersection(s1) {4, 5} Difference : Returns ka f\u00f3 fali de\u2019it elementu sira ne\u2019eb\u00e9 iha set primeiru ne\u2019eb\u00e9 la\u2019os kontein iha set segundu no la\u2019\u00f3s f\u00f3 elementu sira iha set segundu nian. Operad\u00f3r: - Metode: set.difference() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1-s2 {1, 2, 3} >>> s2-s1 {6, 7} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.difference(s2) {1, 2, 3} >>> s2.difference(s1) {6, 7} Symmetric Difference: Returns ka f\u00f3 fali set ida ne\u2019eb\u00e9 kompostu husi elementu sira iha set rua ne\u2019e, maib\u00e9 la f\u00f3 elementu sira ne\u2019eb\u00e9 hanesan iha set rua ka f\u00f3 de\u2019it elementu unique iha set rua ne\u2019e. Operad\u00f3r: ^ Method: set.symmetric_difference() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1^s2 {1, 2, 3, 6, 7} >>> s2^s1 {1, 2, 3, 6, 7} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.symmetric_difference(s2) {1, 2, 3, 6, 7} >>> s2.symmetric_difference(s1) {1, 2, 3, 6, 7}","title":"Python Set"},{"location":"python_set/#python-set","text":"Set mak tipu data mutabel ne\u2019eb\u00e9 halo kolesaun ba data husi item barak iha variavel ida de\u2019it. Set m\u00f3s tipu data ida husi Python ne\u2019eb\u00e9 uza hodi rai kolesaun data hanesan sira seluk list, tuple no dictionary sira iha diferensa oins\u00e1 atu uza. Set simbolika mak { } . Kolesaun data set mak hanesan: Set mutable bele muda objetu sira iha list ho dict Set immutable la bele muda objetu ka aumenta iha set nia laran hanesan list ho dict Set distinct val\u00f3r sira ne\u2019eb\u00e9 dupla Set la simu print ka buka elementu husi \u00edndise(unindexed) Set la order objetu (unordered) >>> numeru = {2, 4, 6, 8, 10} # Kria set numeru >>> print(numeru) # print set {2, 4, 6, 8, 10} >>> string = {\"Mario\", \"Ano\"} # Kria set string >>> print(string) {'Mario', 'Ano'} >>> item = {1, \"Jose\", 5.5, True} # Kria diferensia objetu >>> print(item) {1, 5.5, 'Jose'} Set ida la rai objetu dupla. Maski objetu ida aumenta liu dala ida iha curly brackets laran, iha de\u2019it kopia ida iha objetu ne\u2019eb\u00e9 define ona. Tanba ne\u2019e, la bele halo operasaun index no slicing iha objetu ne\u2019eb\u00e9 define ona. >>> numeru = {1, 2, 2, 3, 4, 4, 5, 5} # elementu 5 mak dupla >>> print(numeru) # elementu 5 sei print ida deit {1, 2, 3, 4, 5} Unordered Order ba elementu sira iha set ne\u2019e la nesesariamente hanesan ho orden ne\u2019eb\u00e9 f\u00f3 tiha ona. Python optimista estrutura set ida ne\u2019eb\u00e9 bele hala\u2019o operasaun iha set ne\u2019e mak define iha matem\u00e1tika ka n\u00fameru sira ne\u2019eb\u00e9 ita f\u00f3 iha set laran. >>> set1 = {'a', 'b', 'c', 'd'} >>> print(set1) {'a', 'c', 'b', 'd'} >>> set1 = {1, 2, 7, 4, 5} >>> print(set1) {1, 2, 4, 5, 7} Set Mutable set mutable nian bele muda tanba set ne\u2019e rasik bele modifika, maib\u00e9 elementu sira ne\u2019eb\u00e9 iha set ne\u2019e tenki iha tipu immutable. >>> set1 = {1, 2} >>> print(set1) {1, 2} >>> set1.add(3) >>> print(set1) {1, 2, 3} >>> set1.update([4, 5]) >>> print(set1) {1, 2, 3, 4, 5} >>> set1 = {\"Mario\"} >>> print(set1) {'Mario'} >>> set1.add(\"Ano\") >>> print(set1) {'Mario', 'Ano'} >>> set1 = {(\"Mario\", \"Ano\")} >>> print(set1) {('Mario', 'Ano')} >>> set1.add(\"Ony\") >>> print(set1) {'Ony', ('Mario', 'Ano')} Set Immutable Objetu immutavel (Hashable) mak bele sai parte ida husi objetu set mak hanesan n\u00fameru (integer, float, no m\u00f3s kompleksu), string no tuple, maib\u00e9 la simu objetu set iha lista, no dictionary. >>> set_val = {(5, 5), 6, 8} # Bele aumenta tuple iha set nia laran >>> print(set_val) {8, (5, 5), 6} >>> set_val = {[5, 5], 6, 8} # La bele aumenta list iha set nia laran Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unhashable type: 'list' unhashable type: 'list' >>> set_val = {[5, 5], 6, 8} # La bele aumenta set iha set seluk nia laran Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unhashable type: 'set' unhashable type: 'set' Iha ezemplu iha leten, (5, 5) mak tuple ida, ne\u2019e duni sai parte husi set. Maib\u00e9, [5, 5] mak lista ida ne\u2019eb\u00e9 hatudu mensajen erru ida ne\u2019e dehan katak lista ne\u2019e la bele f\u00f3 sai (unhashable). (Hashing mak mekanizmu ida iha si\u00e9nsia komputad\u00f3r nian ne\u2019eb\u00e9 permite buka lalais objetu sira iha mem\u00f3ria komputad\u00f3r nian.) Maski objetu mutavel (bele muda) sira la rai iha set ida, maib\u00e9 set ne\u2019e rasik mak objetu mutavel ida. Uza funsaun set () atu kria set ne\u2019eb\u00e9 mamuk. Empty curly braces sei kria dictionary ne\u2019eb\u00e9 mamuk duke set ne\u2019eb\u00e9 mamuk. >>> set_val = {} # Kria dictionary mamuk >>> print(set_val) {} >>> type(set_val) <class 'dict'> >>> set_mamuk = set() # kria set mamuk >>> print(set_mamuk) set() >>> type(set_mamuk) <class 'set'> Funsaun set () ne\u2019e m\u00f3s uza hodi transforma objetu string, tuple, ka dictionary ba objetu set hanesan hatudu iha kraik. >>> s = set('Hello') # konverte string ba set >>> print(s) {'e', 'H', 'l', 'o'} >>> n = set((1,2,7,4,5)) # konverte tuple ba set >>> print(n) {1, 2, 4, 5, 7} >>> i = {1: 'Ida', 2: 'Rua'} >>> s = set(i) # konverte dict ba set >>> print(s) {1, 2}","title":"Python - Set"},{"location":"python_set/#modify-set-elements","text":"Uza m\u00e9todu add (), remove () ka update () hodi modifika kolesaun set. >>> s = set() # kria set mamuk >>> s.add(1) # Aumenta elementu 1 >>> s.add(2) # Aumenta elementu 2 >>> print(s) {1, 2} >>> s.update([2, 3]) # Update elementu >>> print(s) {1, 2, 3} >>> s.remove(2) # Hamoos elementu >>> print(s) {1, 3}","title":"Modify Set Elements"},{"location":"python_set/#set-operations","text":"Hanesan temi tiha ona iha leten, tipu dadus ne\u2019eb\u00e9 define iha Python implementasaun hanesan set ne\u2019eb\u00e9 define iha matem\u00e1tika. Bele hala\u2019o operasaun oioin |, &, - no ^ . Operad\u00f3r sira halo operasaun ho nia unidade, intervensaun, diferensa no diferensa simetrika (union, intersection, difference, and symmetric difference operations ). Operador sira ne\u2019e ida-idak iha m\u00e9todu korrespond\u00e9nsia ne\u2019eb\u00e9 asosiadu ho klase ne\u2019eb\u00e9 harii ona. Union: Returns ka f\u00f3 fila set foun ida ho elementu sira husi set rua ne\u2019eb\u00e9 la inklui sira ne\u2019eb\u00e9 dupla no for order. Operad\u00f3r: | Metode: set.union() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1|s2 {1, 2, 3, 4, 5, 6, 7} >>> s2|s1 {1, 2, 3, 4, 5, 6, 7} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.union(s2) {1, 2, 3, 4, 5, 6, 7} >>> s2.union(s1) {1, 2, 3, 4, 5, 6, 7} Intersection: Returns ka f\u00f3 fali set foun ne\u2019eb\u00e9 kontein elementu ne\u2019eb\u00e9 hanesan iha set rua ne\u2019e nia laran. Operad\u00f3r: & Metode: set.intersection() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1&s2 {4, 5} >>> s2&s1 {4, 5} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.intersection(s2) {4, 5} >>> s2.intersection(s1) {4, 5} Difference : Returns ka f\u00f3 fali de\u2019it elementu sira ne\u2019eb\u00e9 iha set primeiru ne\u2019eb\u00e9 la\u2019os kontein iha set segundu no la\u2019\u00f3s f\u00f3 elementu sira iha set segundu nian. Operad\u00f3r: - Metode: set.difference() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1-s2 {1, 2, 3} >>> s2-s1 {6, 7} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.difference(s2) {1, 2, 3} >>> s2.difference(s1) {6, 7} Symmetric Difference: Returns ka f\u00f3 fali set ida ne\u2019eb\u00e9 kompostu husi elementu sira iha set rua ne\u2019e, maib\u00e9 la f\u00f3 elementu sira ne\u2019eb\u00e9 hanesan iha set rua ka f\u00f3 de\u2019it elementu unique iha set rua ne\u2019e. Operad\u00f3r: ^ Method: set.symmetric_difference() >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1^s2 {1, 2, 3, 6, 7} >>> s2^s1 {1, 2, 3, 6, 7} >>> s1 = {1, 2, 3, 4, 5} >>> s2 = {4, 5, 6, 7} >>> s1.symmetric_difference(s2) {1, 2, 3, 6, 7} >>> s2.symmetric_difference(s1) {1, 2, 3, 6, 7}","title":"Set Operations"},{"location":"python_syntax/","text":"Python - Sintase Bazika \u00b6 Iha ne\u2019e sei aprende sintase b\u00e1zika ho python 3. Lian programasaun komputador kompostu husi liafuan ne\u2019eb\u00e9 define ona no bolu liafuan xave (keyword), regra ida ne\u2019eb\u00e9 preskrita kada liafuan xave mak hanaran sintase(syntax) Python3 int\u00e9rprete define ona liafuan xave iha 33, atu hatene kada liafuan xave bele hare iha lista tuir mai hah\u00fa ezekuta python. ~ \u00bb python niko@Joanicos-Air Python 3.7.2 (default, Dec 5 2020, 20:22:04) [Clang 12.0.0 (clang-1200.0.32.27)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> no hakerek : >>> help(\"keywords\") Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not >>> Programa Python dahuluk \u00b6 Ezekuta programa sira ne\u2019eb\u00e9 diferente modu programasaun. a. Modu Interativu Programasaun Modu Interativu mak command line ne\u2019eb\u00e9 f\u00f3 exekuta direta ka print imediata kada deklarasaun ne\u2019ebe la ho file script hanesan parametru ida ne\u2019eb\u00e9 hatudu iha prompt tuir mai ne\u2019e: >>> print(\"Hello Timor\") Exekuta ho python verzaun 3 uza print deklarasaun ho parentes hanesan print (\u201cHello, Timor!\u201d) nia rezultadu hanesan ne\u2019e: Hello Timor b. Programasaun Modu Script (Script Mode Programming) Programasaun Modu Script mak ezekusaun programa ida ne\u2019eb\u00e9 ita hakerek hanesan fil\u00e9 ida no f\u00f3 naran ho nia estensaun *.py, no ita bele hakerek fil\u00e9 ne\u2019e iha ita-nia testu edit\u00f3r ka vim. Iha ezemplu ida ne\u2019e uza vim iha termin\u00e1l ubuntu nian hah\u00fa ket\u00edk iha termin\u00e1l ~ nano teste.py no hakerek skript hanesan iha ezemplu: print (\"Hello, Timor!\") hanehan iha butaun CTRL + x no hanehan enter hodi rai ita nia fil\u00e9.Tuir mai ezekuta fil\u00e9 ne\u2019eb\u00e9 ita rai hanesan iha ezemplu ~ python teste.py F\u00f3-sai rezultadu hanesan tuir mai ne\u2019e: Hello, Timor! Maneira seluk atu ezekuta python script ida ita halo mudansa iha file teste.py !/usr/bin/python print (\"Hello, Timor!\") Agora koko hala\u2019o programa ida hanesan seku\u00e9nsia hirak ne\u2019e iha terminal. ~ chmod +x teste.py # Ida ne'e atu halo file exekutabel ~ ./teste.py F\u00f3-sai rezultadu hanesan tuir mai ne\u2019e: Hello, Timor! Python Identifikador (Python Identifiers) \u00b6 Python Identifikador mak naran ida ne\u2019eb\u00e9 uza hodi identifika variavel, funsaun, klase, m\u00f3dulu ka objetu seluk. Identifikador hah\u00fa ho letra A to\u2019o Z ka a to\u2019o z ka underscore ( _ ) tuir zero ka letra barak liu ho underscores no d\u00edjitu (0 to\u2019o ba 9). Python la autoriza karakter hanesan @, $, no % iha identifikador. Iha ne\u2019e mak f\u00f3 naran konvensaun ba Python identifikador : Klase naran hah\u00fa ho letra boot. Indentifikador sira seluk ho letra ki\u2019ik. Identifikador ida hah\u00fa ho underscore \u00faniku ne\u2019eb\u00e9 indika katak identifikador ne\u2019e privadu. Identifikador ida hah\u00fa ho underscores rua ne\u2019eb\u00e9 indika identifikador ne\u2019eb\u00e9 privadu maka\u2019as. Karik identifikador m\u00f3s termina ho underscores trailing rua, identifikador ne\u2019eb\u00e9 mak define lian ho naran espesi\u00e1l. Lina no Identasaun (Lines and Indentation) \u00b6 Python la fornese iha braces hodi hatudu bloku sira kona-ba k\u00f3digu ba klase no definisaun funsaun ka kontrola movimentu( flow control ). Espasu kada li\u00f1a iha klase ka funsaun iha espasu 4 ka kada tab ida. Pur ezemplu \u2212 class teste(): print(\"Ita nia familia\") class teste(): print(\"Ita nia familia\") def funs(): print(\"hatudu ita nia funsaun\") Kotasaun iha Python (Quotation in Python) \u00b6 Python simu de\u2019it quotes simples (\u2018), dupla (\u201c) no triplu (\u201c\u201d\u201d ka \u201c\u201d\u201c) quotes atu tuir string literals, bainhira tipu quote hah\u00fa no termina string. Triplu quotes sira uza hodi span string ba iha li\u00f1a oin-oin. Pur ezemplu hotu-hotu tuir mak leg\u00e1l. liafuan = 'Liafuan' sentence = \"Ida ne'e sentense.\" paragrafo = \"\"\"Ida mak paragrado.\"\"\u201d Kometariu iha Python (Comments in Python) \u00b6 Koment\u00e1riu iha Python Sinal Hash (#) iha python hatudu katak ida ne\u2019e atu halo ka hakerek komentariu konaba ita nia script ne\u2019eb\u00e9 ita halo. #!/usr/bin/python # Komentariu Dahuluk print (\"Hello, Python!\") # Komentariu Daruak F\u00f3-sai rezultadu hanesan tuir mai ne\u2019e: Hello, Python! Ita bele ketik koment\u00e1riu ida iha li\u00f1a ne\u2019eb\u00e9 hanesan hafoin deklarasaun ka espresaun name = \"Madisetti\" # Ida ne'e halo koment\u00e1riu fila fali Ita bele halo koment\u00e1riu barak iha li\u00f1a hanesan tuir mai ne\u2019e : # Ida ne'e komentariu dahuluk. # Ida ne'e komentariu daruak. # Ida ne'e komentariu datoluk. # Kometariu remata. Sekuensia string ho triplu quotes bele uza hanesan koment\u00e1riu iha lina barak: '''Ida ne'e mak halo komentariu iha lina oin-oinka komentariu sira ne'ebe ita hakerek barak liu bele uza triplu quotes ida ne'e'''","title":"Python Sintase"},{"location":"python_syntax/#python-sintase-bazika","text":"Iha ne\u2019e sei aprende sintase b\u00e1zika ho python 3. Lian programasaun komputador kompostu husi liafuan ne\u2019eb\u00e9 define ona no bolu liafuan xave (keyword), regra ida ne\u2019eb\u00e9 preskrita kada liafuan xave mak hanaran sintase(syntax) Python3 int\u00e9rprete define ona liafuan xave iha 33, atu hatene kada liafuan xave bele hare iha lista tuir mai hah\u00fa ezekuta python. ~ \u00bb python niko@Joanicos-Air Python 3.7.2 (default, Dec 5 2020, 20:22:04) [Clang 12.0.0 (clang-1200.0.32.27)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> no hakerek : >>> help(\"keywords\") Here is a list of the Python keywords. Enter any keyword to get more help. False class from or None continue global pass True def if raise and del import return as elif in try assert else is while async except lambda with await finally nonlocal yield break for not >>>","title":"Python - Sintase Bazika"},{"location":"python_syntax/#programa-python-dahuluk","text":"Ezekuta programa sira ne\u2019eb\u00e9 diferente modu programasaun. a. Modu Interativu Programasaun Modu Interativu mak command line ne\u2019eb\u00e9 f\u00f3 exekuta direta ka print imediata kada deklarasaun ne\u2019ebe la ho file script hanesan parametru ida ne\u2019eb\u00e9 hatudu iha prompt tuir mai ne\u2019e: >>> print(\"Hello Timor\") Exekuta ho python verzaun 3 uza print deklarasaun ho parentes hanesan print (\u201cHello, Timor!\u201d) nia rezultadu hanesan ne\u2019e: Hello Timor b. Programasaun Modu Script (Script Mode Programming) Programasaun Modu Script mak ezekusaun programa ida ne\u2019eb\u00e9 ita hakerek hanesan fil\u00e9 ida no f\u00f3 naran ho nia estensaun *.py, no ita bele hakerek fil\u00e9 ne\u2019e iha ita-nia testu edit\u00f3r ka vim. Iha ezemplu ida ne\u2019e uza vim iha termin\u00e1l ubuntu nian hah\u00fa ket\u00edk iha termin\u00e1l ~ nano teste.py no hakerek skript hanesan iha ezemplu: print (\"Hello, Timor!\") hanehan iha butaun CTRL + x no hanehan enter hodi rai ita nia fil\u00e9.Tuir mai ezekuta fil\u00e9 ne\u2019eb\u00e9 ita rai hanesan iha ezemplu ~ python teste.py F\u00f3-sai rezultadu hanesan tuir mai ne\u2019e: Hello, Timor! Maneira seluk atu ezekuta python script ida ita halo mudansa iha file teste.py !/usr/bin/python print (\"Hello, Timor!\") Agora koko hala\u2019o programa ida hanesan seku\u00e9nsia hirak ne\u2019e iha terminal. ~ chmod +x teste.py # Ida ne'e atu halo file exekutabel ~ ./teste.py F\u00f3-sai rezultadu hanesan tuir mai ne\u2019e: Hello, Timor!","title":"Programa Python dahuluk"},{"location":"python_syntax/#python-identifikador-python-identifiers","text":"Python Identifikador mak naran ida ne\u2019eb\u00e9 uza hodi identifika variavel, funsaun, klase, m\u00f3dulu ka objetu seluk. Identifikador hah\u00fa ho letra A to\u2019o Z ka a to\u2019o z ka underscore ( _ ) tuir zero ka letra barak liu ho underscores no d\u00edjitu (0 to\u2019o ba 9). Python la autoriza karakter hanesan @, $, no % iha identifikador. Iha ne\u2019e mak f\u00f3 naran konvensaun ba Python identifikador : Klase naran hah\u00fa ho letra boot. Indentifikador sira seluk ho letra ki\u2019ik. Identifikador ida hah\u00fa ho underscore \u00faniku ne\u2019eb\u00e9 indika katak identifikador ne\u2019e privadu. Identifikador ida hah\u00fa ho underscores rua ne\u2019eb\u00e9 indika identifikador ne\u2019eb\u00e9 privadu maka\u2019as. Karik identifikador m\u00f3s termina ho underscores trailing rua, identifikador ne\u2019eb\u00e9 mak define lian ho naran espesi\u00e1l.","title":"Python Identifikador (Python Identifiers)"},{"location":"python_syntax/#lina-no-identasaun-lines-and-indentation","text":"Python la fornese iha braces hodi hatudu bloku sira kona-ba k\u00f3digu ba klase no definisaun funsaun ka kontrola movimentu( flow control ). Espasu kada li\u00f1a iha klase ka funsaun iha espasu 4 ka kada tab ida. Pur ezemplu \u2212 class teste(): print(\"Ita nia familia\") class teste(): print(\"Ita nia familia\") def funs(): print(\"hatudu ita nia funsaun\")","title":"Lina no Identasaun (Lines and Indentation)"},{"location":"python_syntax/#kotasaun-iha-python-quotation-in-python","text":"Python simu de\u2019it quotes simples (\u2018), dupla (\u201c) no triplu (\u201c\u201d\u201d ka \u201c\u201d\u201c) quotes atu tuir string literals, bainhira tipu quote hah\u00fa no termina string. Triplu quotes sira uza hodi span string ba iha li\u00f1a oin-oin. Pur ezemplu hotu-hotu tuir mak leg\u00e1l. liafuan = 'Liafuan' sentence = \"Ida ne'e sentense.\" paragrafo = \"\"\"Ida mak paragrado.\"\"\u201d","title":"Kotasaun iha Python (Quotation in Python)"},{"location":"python_syntax/#kometariu-iha-python-comments-in-python","text":"Koment\u00e1riu iha Python Sinal Hash (#) iha python hatudu katak ida ne\u2019e atu halo ka hakerek komentariu konaba ita nia script ne\u2019eb\u00e9 ita halo. #!/usr/bin/python # Komentariu Dahuluk print (\"Hello, Python!\") # Komentariu Daruak F\u00f3-sai rezultadu hanesan tuir mai ne\u2019e: Hello, Python! Ita bele ketik koment\u00e1riu ida iha li\u00f1a ne\u2019eb\u00e9 hanesan hafoin deklarasaun ka espresaun name = \"Madisetti\" # Ida ne'e halo koment\u00e1riu fila fali Ita bele halo koment\u00e1riu barak iha li\u00f1a hanesan tuir mai ne\u2019e : # Ida ne'e komentariu dahuluk. # Ida ne'e komentariu daruak. # Ida ne'e komentariu datoluk. # Kometariu remata. Sekuensia string ho triplu quotes bele uza hanesan koment\u00e1riu iha lina barak: '''Ida ne'e mak halo komentariu iha lina oin-oinka komentariu sira ne'ebe ita hakerek barak liu bele uza triplu quotes ida ne'e'''","title":"Kometariu iha Python (Comments in Python)"},{"location":"python_tuples/","text":"Python - Tuples \u00b6 Tuple mak kolesaun ida-ne\u2019eb\u00e9 la bele muda (unchangeable) ba elementu sira husi tipu dadus oioin. Nee mak kolesaun ida ne\u2019eb\u00e9 halo tuir ona, nune\u2019e nia prezerva orden ba elementu sira ne\u2019eb\u00e9 define ona. Tuple sira define husi elementu enclosing iha parenteses (), haketak husi komma. Tuir mai deklara tipu variable tuple. >>> tpl=() # tuple mamuk >>> print(tpl) () >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print(naran) ('fahi', 'rusa', 'bibi', 'manu') >>> numeru=(1, 2, 3, 4, 5) # int tuple >>> print(numeru) (1, 2, 3, 4, 5) >>> item=(1, \"fahi\", True, 30, \"rusa\") >>> print(item) (1, 'fahi', True, 30, 'rusa') Maibe, la presiza loke no taka elementu tuple sira iha parentesia. Objetu tuple bele inklui elementu sira ne\u2019eb\u00e9 haketak husi komma ne\u2019eb\u00e9 la iha parente. >>> naran='fahi', 'rusa', 'bibi', 'manu' #String tuple >>> print(naran) ('fahi', 'rusa', 'bibi', 'manu') >>> numeru=1, 2, 3, 4, 5 >>> print(numeru) (1, 2, 3, 4, 5) >>> item=1, \"fahi\", True, 30, \"rusa\" >>> print(item) (1, 'fahi', True, 30, 'rusa') Tuple la bele deklara ho elementu ida de\u2019it se karik la uza komma hafoin elementu id\u0105. >>> naran = ('Timor') # Konsidera hanesan tipu string deit >>> print(type(naran)) <class 'str'> >>> naran = ('Timor',) # Tipu tuple ho elementu ida nebe haketak husi comma >>> print(type(naran)) <class 'tuple'> Asesu elementu tuple \u00b6 Elementu ida-idak iha tuple hetan asesu liuhusi \u00edndise iha square brackets [ ]. Indise ida hah\u00fa ho zero no remata ho (numeru elementu 0, -1), hanesan hatudu iha kraik. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print(naran[0]) fahi >>> print(naran[1]) rusa >>> print(naran[2]) bibi >>> print(naran[-1]) manu >>> numeru=(1, 2, 3, 4, 5) >>> print(numeru[0]) 1 >>> print(numeru[2]) 3 >>> print(numeru[-1]) 5 Tuple m\u00f3s suporta \u00edndise negativu, hanesan ho tipu lista. Indise negativu primeiru hah\u00fa husi - numeru no remata ho -1 ba elementu ikus. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print(naran[-4]) fahi >>> print(naran[-3]) rusa >>> print(naran[-2]) bibi >>> print(naran[-1]) manu Se elementu iha \u00edndise espes\u00edfiku ne\u2019e la eziste, entaun sei mosu erru \u201c\u00edndise out of range\u201d. >>> print(naran[5]) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> IndexError: tuple index out of range tuple index out of range Elementu tuple nia bele la halo pakote no atribui ka troka ba variavel sira, hanesan hatudu iha kraik. Maibe, n\u00fameru variavel sira tenke korresponde ho n\u00fameru elementu sira iha tuple nia laran se lae, mosu erru. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> a, b, c, d = naran >>> print (a, b, c, d) fahi rusa bibi manu >>> print (a, b, c, d, e) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> NameError: name 'e' is not defined Atualiza ka hamoos elementu sira tuple \u00b6 Tuple la bele troka. bainhira kria tiha tuple ida, kualk\u00e9r operasaun ne\u2019eb\u00e9 buka atu troka ninia konte\u00fadu la bele. Porezemplu, koko atu modifika ka hasai elementu naran tuple sei rezulta erru. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> naran[-1] = \"krau\" Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment >>> del naran[-1] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object doesn't support item deletion Maibe, ita bele hasai duple tomak uza liafuan-xave del . >>> del naran Class Tuple \u00b6 Tipu tuple mak klase tuple. Haree tipu variavel ne\u2019eb\u00e9 uza funsaun type () . >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print('tipu naran: ', type(naran)) tipu naran: <class 'tuple'> >>> numeru=(1, 2, 3, 4, 5) >>> print('tipu numeru: ', type(numeru)) tipu numeru: <class 'tuple'> Konstrut\u00f3r tuple () uza atu transforma kualk\u00e9r iterable ba tipu tuple. >>> tpl=tuple('Helo') >>> print(tpl) ('H', 'e', 'l', 'o') >>> tpl=tuple([1, 2, 3, 4, 5]) >>> print(tpl) (1, 2, 3, 4, 5) >>> tpl=tuple({1, 2, 3, 4, 5}) >>> print(tpl) (1, 2, 3, 4, 5) >>> tpl=tuple({1:\"ida\", 3:\"tolu\"}) >>> print(tpl) (1, 3) Operasaun Tuple \u00b6 Opersaun tuple(tuple operation) hanesan ho string no objetu tuple m\u00f3s hanesan sekuensia ida. Tanba nee, operador sira ne\u2019eb\u00e9 uza ho string m\u00f3s disponivel ba tuple. Operador + f\u00f3 fila rezultadu tuple ida-ne\u2019eb\u00e9 inklui elementu hotu-hotu husi objetu tuple primeiru no segundu. >>> T1 = (1,2,3,4,5) >>> T2 = (6,7,8) >>> T1+T2 (1, 2, 3, 4, 5, 6, 7, 8) >>> T1+(6,) (1, 2, 3, 4, 5, 6) * Operador Concatenates kopia multipla husi tuple ne\u2019eb\u00e9 hanesan. >>> T1 = (1,2,3,4,5) >>> T2 = (6,7,8) >>> T1*2 (1, 2, 3, 4, 5, 1, 2, 3, 4, 5) Operador [ ] fo fali rezultadu item iha \u00edndise ne\u2019eb\u00e9 iha ona. Indise negativu sura hosi pozisaun sorin loos. >>> T1 = (1,2,3,4,5) >>> T1[2] 3 >>> T1[-2] 4 Operador [:] fo fali rezultadu item sira iha range ne\u2019eb\u00e9 espes\u00edfika husi operandu \u00edndise rua ne\u2019eb\u00e9 haketak husi : s\u00edmbolu. Se operandu primeiru la hetan, entre n\u00fameru ne\u2019ebe hah\u00fa husi zero. Se operandu daruak la iha, range ne\u2019e ba to\u2019o tuple nia rohan. >>> T1 = (1,2,3,4,5) >>> T1[1:2] (2,) >>> T1[1:4] (2, 3, 4) >>> T1[3:] (4, 5) >>> T1[:3] (1, 2, 3) Operador in ne\u2019e karik f\u00f3 fali loos se item ida eziste iha tuple ne\u2019eb\u00e9 f\u00f3 ona. >>> T1 = (1,2,3,4,5) >>> 3 in T1 True >>> 6 in T1 False Operador not in karik la fo fila fali loos se item ida la eziste iha tuple ne\u2019eb\u00e9 f\u00f3 ona. >>> T1 = (1,2,3,4,5) >>> 5 not in T1 False >>> 6 not in T1 True","title":"Python Tuple"},{"location":"python_tuples/#python-tuples","text":"Tuple mak kolesaun ida-ne\u2019eb\u00e9 la bele muda (unchangeable) ba elementu sira husi tipu dadus oioin. Nee mak kolesaun ida ne\u2019eb\u00e9 halo tuir ona, nune\u2019e nia prezerva orden ba elementu sira ne\u2019eb\u00e9 define ona. Tuple sira define husi elementu enclosing iha parenteses (), haketak husi komma. Tuir mai deklara tipu variable tuple. >>> tpl=() # tuple mamuk >>> print(tpl) () >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print(naran) ('fahi', 'rusa', 'bibi', 'manu') >>> numeru=(1, 2, 3, 4, 5) # int tuple >>> print(numeru) (1, 2, 3, 4, 5) >>> item=(1, \"fahi\", True, 30, \"rusa\") >>> print(item) (1, 'fahi', True, 30, 'rusa') Maibe, la presiza loke no taka elementu tuple sira iha parentesia. Objetu tuple bele inklui elementu sira ne\u2019eb\u00e9 haketak husi komma ne\u2019eb\u00e9 la iha parente. >>> naran='fahi', 'rusa', 'bibi', 'manu' #String tuple >>> print(naran) ('fahi', 'rusa', 'bibi', 'manu') >>> numeru=1, 2, 3, 4, 5 >>> print(numeru) (1, 2, 3, 4, 5) >>> item=1, \"fahi\", True, 30, \"rusa\" >>> print(item) (1, 'fahi', True, 30, 'rusa') Tuple la bele deklara ho elementu ida de\u2019it se karik la uza komma hafoin elementu id\u0105. >>> naran = ('Timor') # Konsidera hanesan tipu string deit >>> print(type(naran)) <class 'str'> >>> naran = ('Timor',) # Tipu tuple ho elementu ida nebe haketak husi comma >>> print(type(naran)) <class 'tuple'>","title":"Python - Tuples"},{"location":"python_tuples/#asesu-elementu-tuple","text":"Elementu ida-idak iha tuple hetan asesu liuhusi \u00edndise iha square brackets [ ]. Indise ida hah\u00fa ho zero no remata ho (numeru elementu 0, -1), hanesan hatudu iha kraik. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print(naran[0]) fahi >>> print(naran[1]) rusa >>> print(naran[2]) bibi >>> print(naran[-1]) manu >>> numeru=(1, 2, 3, 4, 5) >>> print(numeru[0]) 1 >>> print(numeru[2]) 3 >>> print(numeru[-1]) 5 Tuple m\u00f3s suporta \u00edndise negativu, hanesan ho tipu lista. Indise negativu primeiru hah\u00fa husi - numeru no remata ho -1 ba elementu ikus. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print(naran[-4]) fahi >>> print(naran[-3]) rusa >>> print(naran[-2]) bibi >>> print(naran[-1]) manu Se elementu iha \u00edndise espes\u00edfiku ne\u2019e la eziste, entaun sei mosu erru \u201c\u00edndise out of range\u201d. >>> print(naran[5]) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> IndexError: tuple index out of range tuple index out of range Elementu tuple nia bele la halo pakote no atribui ka troka ba variavel sira, hanesan hatudu iha kraik. Maibe, n\u00fameru variavel sira tenke korresponde ho n\u00fameru elementu sira iha tuple nia laran se lae, mosu erru. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> a, b, c, d = naran >>> print (a, b, c, d) fahi rusa bibi manu >>> print (a, b, c, d, e) Traceback (most recent call last): File \"<stdin>\", line 1, in <module> NameError: name 'e' is not defined","title":"Asesu elementu tuple"},{"location":"python_tuples/#atualiza-ka-hamoos-elementu-sira-tuple","text":"Tuple la bele troka. bainhira kria tiha tuple ida, kualk\u00e9r operasaun ne\u2019eb\u00e9 buka atu troka ninia konte\u00fadu la bele. Porezemplu, koko atu modifika ka hasai elementu naran tuple sei rezulta erru. >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> naran[-1] = \"krau\" Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object does not support item assignment >>> del naran[-1] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: 'tuple' object doesn't support item deletion Maibe, ita bele hasai duple tomak uza liafuan-xave del . >>> del naran","title":"Atualiza ka hamoos elementu sira tuple"},{"location":"python_tuples/#class-tuple","text":"Tipu tuple mak klase tuple. Haree tipu variavel ne\u2019eb\u00e9 uza funsaun type () . >>> naran=('fahi', 'rusa', 'bibi', 'manu') >>> print('tipu naran: ', type(naran)) tipu naran: <class 'tuple'> >>> numeru=(1, 2, 3, 4, 5) >>> print('tipu numeru: ', type(numeru)) tipu numeru: <class 'tuple'> Konstrut\u00f3r tuple () uza atu transforma kualk\u00e9r iterable ba tipu tuple. >>> tpl=tuple('Helo') >>> print(tpl) ('H', 'e', 'l', 'o') >>> tpl=tuple([1, 2, 3, 4, 5]) >>> print(tpl) (1, 2, 3, 4, 5) >>> tpl=tuple({1, 2, 3, 4, 5}) >>> print(tpl) (1, 2, 3, 4, 5) >>> tpl=tuple({1:\"ida\", 3:\"tolu\"}) >>> print(tpl) (1, 3)","title":"Class Tuple"},{"location":"python_tuples/#operasaun-tuple","text":"Opersaun tuple(tuple operation) hanesan ho string no objetu tuple m\u00f3s hanesan sekuensia ida. Tanba nee, operador sira ne\u2019eb\u00e9 uza ho string m\u00f3s disponivel ba tuple. Operador + f\u00f3 fila rezultadu tuple ida-ne\u2019eb\u00e9 inklui elementu hotu-hotu husi objetu tuple primeiru no segundu. >>> T1 = (1,2,3,4,5) >>> T2 = (6,7,8) >>> T1+T2 (1, 2, 3, 4, 5, 6, 7, 8) >>> T1+(6,) (1, 2, 3, 4, 5, 6) * Operador Concatenates kopia multipla husi tuple ne\u2019eb\u00e9 hanesan. >>> T1 = (1,2,3,4,5) >>> T2 = (6,7,8) >>> T1*2 (1, 2, 3, 4, 5, 1, 2, 3, 4, 5) Operador [ ] fo fali rezultadu item iha \u00edndise ne\u2019eb\u00e9 iha ona. Indise negativu sura hosi pozisaun sorin loos. >>> T1 = (1,2,3,4,5) >>> T1[2] 3 >>> T1[-2] 4 Operador [:] fo fali rezultadu item sira iha range ne\u2019eb\u00e9 espes\u00edfika husi operandu \u00edndise rua ne\u2019eb\u00e9 haketak husi : s\u00edmbolu. Se operandu primeiru la hetan, entre n\u00fameru ne\u2019ebe hah\u00fa husi zero. Se operandu daruak la iha, range ne\u2019e ba to\u2019o tuple nia rohan. >>> T1 = (1,2,3,4,5) >>> T1[1:2] (2,) >>> T1[1:4] (2, 3, 4) >>> T1[3:] (4, 5) >>> T1[:3] (1, 2, 3) Operador in ne\u2019e karik f\u00f3 fali loos se item ida eziste iha tuple ne\u2019eb\u00e9 f\u00f3 ona. >>> T1 = (1,2,3,4,5) >>> 3 in T1 True >>> 6 in T1 False Operador not in karik la fo fila fali loos se item ida la eziste iha tuple ne\u2019eb\u00e9 f\u00f3 ona. >>> T1 = (1,2,3,4,5) >>> 5 not in T1 False >>> 6 not in T1 True","title":"Operasaun Tuple"},{"location":"python_tutorial/","text":"Python Tutorial in Tetun \u00b6 Table of Contents \u00b6 Python Basics Tutorial \u00b6 Python - Home Python - Overview Python - Environment Setup Python - Basic Syntax Python - Variables and Types Python - Python Numbers Python - Strings Python - Lists Python - Tuples Python - Dictionar Python - Data Type Conversion Python - Basic Operators Python - String Formatting Python - Basic String Operations Python - Conditions Python - Loops Python - Functions Python - Classes and Objects Python - Dictionaries Python - Modules and Packages Python - Data Science Tutorials Python - Numpy Arrays Python - Pandas Basics Python - Advanced Tutorials \u00b6 Python - Generators Python - List Comprehensions Python - Multiple Function Arguments Python - Regular Expression Python - Exception Handling Python - Sets Python - Serialization Python - Partial functions Python - Decorators Python - Other Python Tutorials \u00b6 Python - Database Access Python - Network Programming Python - GUI Programming Python - Web development Python - Framework 1. Botle 2. Flask 3. Django","title":"Python Tutorial in Tetun"},{"location":"python_tutorial/#python-tutorial-in-tetun","text":"","title":"Python Tutorial in Tetun"},{"location":"python_tutorial/#table-of-contents","text":"","title":"Table of Contents"},{"location":"python_tutorial/#python-basics-tutorial","text":"Python - Home Python - Overview Python - Environment Setup Python - Basic Syntax Python - Variables and Types Python - Python Numbers Python - Strings Python - Lists Python - Tuples Python - Dictionar Python - Data Type Conversion Python - Basic Operators Python - String Formatting Python - Basic String Operations Python - Conditions Python - Loops Python - Functions Python - Classes and Objects Python - Dictionaries Python - Modules and Packages Python - Data Science Tutorials Python - Numpy Arrays Python - Pandas Basics","title":"Python Basics Tutorial"},{"location":"python_tutorial/#python-advanced-tutorials","text":"Python - Generators Python - List Comprehensions Python - Multiple Function Arguments Python - Regular Expression Python - Exception Handling Python - Sets Python - Serialization Python - Partial functions Python - Decorators","title":"Python - Advanced Tutorials"},{"location":"python_tutorial/#python-other-python-tutorials","text":"Python - Database Access Python - Network Programming Python - GUI Programming Python - Web development Python - Framework 1. Botle 2. Flask 3. Django","title":"Python - Other Python Tutorials"},{"location":"python_variables/","text":"Python - Variabel \u00b6 Saida mak Variabel ? Variavel mak fatin mem\u00f3ria rezerva ida hodi rai val\u00f3r sira. Signifika katak bainhira ita kria variavel ida ita rezerva hela fatin mamuk iha mem\u00f3ria, val\u00f3r sira ne\u2019eb\u00e9 ita rai bele ho tipu data interger ka karakter\u00edstika sira. Deklara variabel \u00b6 Atu deklara variavel iha python partikularmente ita identifika Naran no Valor Naran mak hodi identifika variavel Valor bele identifika depois operad\u00f3r (=) Por ezemplu: a = 1 Notas: a mak identifika ona naran husi variavel no valor mak 1 Naran Variabel \u00b6 Python naran variavel bele refere ba kualk\u00e9r naran husi variavel bele hakerek ho letra maiskula ka minuskula no bele hakerek dijit\u00e1l husi 0 to\u2019o 9 no uza s\u00edmbolu sira hanesan underscore(__) >>> naran = \"Mario\" >>> tinan = 30 >>> altura = 168 Print variavel naran : >>> print(naran) >>> print(tinan) >>> print(altura) Fo sai rezultadu: Mario 30 168 Multipla Assignment \u00b6 Iha python bele kria variavel barak no refere ba valor ida deit ka ita bele kria valor ida bele assign ba multipla variavel ka variavel oin-oin. Ezemplu: Assign valor ida ba multipla variavel ka bele kria multipla variavel fo valor ida edit. a = b = c = 10 print(a) print(b) print(c) Assign multipla valor ba multipla variavel x, y, z = 10, 15, \"hello\" print (x) print (y) print (z) Tipu Variavel \u00b6 Tipu python variavel iha rua local variavel no global variavel. Local Variavel Local variavel mak defini iha funsaun nia laran no iha local scope. Ezemplu: # Deklara funsaun def func(): # defini lokal variabel a = 20 print(\"Variavel a mak\", a) # bolu funsaun func() F\u00f3 sai rezultadu Variavel a mak 20 Global Variavel bele uza jeral ka laos iha funsaun nia laran ka global scope no bele uza mos iha funsaun nia laran ka local scope maybe tenki uza global keyword. Ezemplu: a = 20 # Global variabel # Deklara funsaun def func(): print(\"global a mak\", a) # bolu funsaun func() F\u00f3 sai rezultadu global a mak 20 Ezemplu global variavel iha funsaun nia laran uza global keyword: # Deklara funsaun def func(): global a a = 20 # defini lokal variabel print(\"global a mak\", a) # bolu funsaun func() F\u00f3 sai rezultadu global a mak 20 Ezemplu konaba deklara global no local variavel iha funsaun nia laran: # Deklara funsaun def func(): global a a = 20 h = 2 # defini local variabel print(\"global\", a, \"no local\", h) func() # bolu funsaun","title":"Python Variabel"},{"location":"python_variables/#python-variabel","text":"Saida mak Variabel ? Variavel mak fatin mem\u00f3ria rezerva ida hodi rai val\u00f3r sira. Signifika katak bainhira ita kria variavel ida ita rezerva hela fatin mamuk iha mem\u00f3ria, val\u00f3r sira ne\u2019eb\u00e9 ita rai bele ho tipu data interger ka karakter\u00edstika sira.","title":"Python - Variabel"},{"location":"python_variables/#deklara-variabel","text":"Atu deklara variavel iha python partikularmente ita identifika Naran no Valor Naran mak hodi identifika variavel Valor bele identifika depois operad\u00f3r (=) Por ezemplu: a = 1 Notas: a mak identifika ona naran husi variavel no valor mak 1","title":"Deklara variabel"},{"location":"python_variables/#naran-variabel","text":"Python naran variavel bele refere ba kualk\u00e9r naran husi variavel bele hakerek ho letra maiskula ka minuskula no bele hakerek dijit\u00e1l husi 0 to\u2019o 9 no uza s\u00edmbolu sira hanesan underscore(__) >>> naran = \"Mario\" >>> tinan = 30 >>> altura = 168 Print variavel naran : >>> print(naran) >>> print(tinan) >>> print(altura) Fo sai rezultadu: Mario 30 168","title":"Naran Variabel"},{"location":"python_variables/#multipla-assignment","text":"Iha python bele kria variavel barak no refere ba valor ida deit ka ita bele kria valor ida bele assign ba multipla variavel ka variavel oin-oin. Ezemplu: Assign valor ida ba multipla variavel ka bele kria multipla variavel fo valor ida edit. a = b = c = 10 print(a) print(b) print(c) Assign multipla valor ba multipla variavel x, y, z = 10, 15, \"hello\" print (x) print (y) print (z)","title":"Multipla Assignment"},{"location":"python_variables/#tipu-variavel","text":"Tipu python variavel iha rua local variavel no global variavel. Local Variavel Local variavel mak defini iha funsaun nia laran no iha local scope. Ezemplu: # Deklara funsaun def func(): # defini lokal variabel a = 20 print(\"Variavel a mak\", a) # bolu funsaun func() F\u00f3 sai rezultadu Variavel a mak 20 Global Variavel bele uza jeral ka laos iha funsaun nia laran ka global scope no bele uza mos iha funsaun nia laran ka local scope maybe tenki uza global keyword. Ezemplu: a = 20 # Global variabel # Deklara funsaun def func(): print(\"global a mak\", a) # bolu funsaun func() F\u00f3 sai rezultadu global a mak 20 Ezemplu global variavel iha funsaun nia laran uza global keyword: # Deklara funsaun def func(): global a a = 20 # defini lokal variabel print(\"global a mak\", a) # bolu funsaun func() F\u00f3 sai rezultadu global a mak 20 Ezemplu konaba deklara global no local variavel iha funsaun nia laran: # Deklara funsaun def func(): global a a = 20 h = 2 # defini local variabel print(\"global\", a, \"no local\", h) func() # bolu funsaun","title":"Tipu Variavel"}]}